#
# podman is group of target hosts, in this example podman01 and podman02
---
- name: Provision podman hosts, servers that host podman pods and containers
  hosts: podman
  vars:
    minimal_ansible_distribution_major_version: 8
    pv: sdb
    vg: vg01
    lv: data
    mp: "/container-data"  # MountPoint
    graphroot: "{{ mp }}/var/lib/containers/storage"

  tasks:

    - name: Ensure target OS is supported
      ansible.builtin.fail:
        msg: "Playbook only suitable/tested for CentOS {{ mimimal_ansible_distribution_major_version }} or higher"
      when: ansible_os_family != "RedHat" or (ansible_distribution_major_version | int) < minimal_ansible_distribution_major_version

    - name: Ensure repos can be found
      ansible.builtin.include_role:
        name: arikkert.centos8repo
      when: ansible_distribution == "CentOS" and (ansible_distribution_major_version | int) == 8

    # nog uitzoeken:
    # grubby --remove-args="rhgb quiet"
    # grub2-editenv --help
    - name: Ensure bootmessages are displayed
      ansible.builtin.replace:
        path: /boot/grub2/grubenv
        regexp: 'rhgb quiet'
        replace: ''
        backup: true
      tags: grub
      when: false

    #
    # podman itself
    #

    - name: Ensure podman is installed
      ansible.builtin.yum:
        name: podman

    - name: Ensure podman version is detected
      ansible.builtin.shell: podman --version
      register: podman_version
      changed_when: false
      check_mode: false

    - name: Ensure podman version is shown
      ansible.builtin.debug:
        msg: "{{ podman_version.stdout.split('\n') }}"

    #
    # podman-compose
    #

    - name: Relabel needed for this (vagrant) box and timezone
      ansible.builtin.command: restorecon -v /etc/localtime
      register: command
      changed_when: '"Relabeled" in command.stdout'

    - name: Ensure epel is installed
      ansible.builtin.command:
        cmd: dnf install -y epel-release
        creates: /etc/yum.repos.d/epel.repo

    - name: Ensure podman-compose is installed
      ansible.builtin.yum:
        name: podman-compose

    - name: Ensure podman-compose version is detected
      ansible.builtin.shell: /bin/podman-compose version
      register: podmancompose_version
      changed_when: false
      check_mode: false

    - name: Ensure podman-compose version is shown
      ansible.builtin.debug:
        msg: "{{ podmancompose_version.stdout.split('\n') }}"

    #
    # continue
    #

    - name: Ensure user podman is installed
      ansible.builtin.user:
        name: podman

    - name: Ensure sudo is installed
      ansible.builtin.package:
        name: sudo

    - name: Ensure user podman can elevate privileges
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: /etc/sudoers.d/
        mode: '0440'
        validate: visudo -cf %s
      loop:
        - 10_podman

    # Create storage for persistent container data

    - name: Ensure VG deps are installed
      ansible.builtin.yum:
        name: lvm2

    - name: Ensure VG exists
      community.general.lvg:
        pvs: /dev/{{ pv }}
        vg: "{{ vg }}"

    - name: Ensure LV exists
      community.general.lvol:
        vg: "{{ vg }}"
        lv: "{{ lv }}"
        size: 40G
        pvs: /dev/{{ pv }}

    - name: Ensure FS exists
      community.general.filesystem:
        fstype: xfs
        dev: /dev/mapper/{{ vg }}-{{ lv }}

    - name: Ensure MP (mountpoint) exists
      ansible.builtin.file:
        path: "{{ mp }}"
        state: directory
        owner: podman
        group: podman
        mode: '0755'

    - name: Ensure MP is mounted
      ansible.posix.mount:
        path: "{{ mp }}"
        src: /dev/mapper/{{ vg }}-{{ lv }}
        fstype: xfs
        state: mounted

    - name: Show
      ansible.builtin.debug:
        msg: "{{ graphroot }}"

    - name: Ensure container storage directory is present
      ansible.builtin.file:
        path: "{{ graphroot }}"
        state: directory
        mode: '0700'

    # https://ahelpme.com/software/podman/change-the-location-of-container-storage-in-podman-with-selinux-enabled/
    # om default container storage uit OS image te halen, anders ben je afhankelijk bijv als je vagrant boxes gebruikt
    #
    # nog uitzoeken hoe dit beetje mooier kan
    # Gaat erom dat de nieuwe locatie de juiste fcontext heeft en idempotent
    - name: Ensure selinux fcontext is saved in fcontext db
      ansible.builtin.command: "semanage fcontext -a -e /var/lib/containers {{ mp }}/var/lib/containers"
      register: result
      changed_when: '"already exists" not in result.stderr'
      failed_when: false

    - name: Ensure selinux perms is applied as set in fcontext db
      ansible.builtin.command: "restorecon -R {{ mp }}/var/lib/containers"
      when: '"already exists" not in result.stderr'

    - name: Ensure the new container storage is used
      ansible.builtin.lineinfile:
        path: /etc/containers/storage.conf
        regexp: '^graphroot = '
        line: graphroot = "{{ graphroot }}"
        backup: true

    - name: Relabel needed for this (vagrant) box and timezone
      ansible.builtin.command: restorecon -v /etc/localtime
      register: command
      changed_when: '"Relabeled" in command.stdout'

    #
    # cockpit (podman UI)
    #

    - name: Ensure cockpit is installed
      ansible.builtin.dnf:
        name:
          - cockpit
          - cockpit-podman

    - name: Ensure cockpit is running
      ansible.builtin.service:
        name: cockpit.socket
        enabled: true
        state: started

    #
    # firewall
    #

    - name: Ensure firewalld is installed
      ansible.builtin.package:
        name: firewalld

    - name: Ensure firewall is running
      ansible.builtin.service:
        name: firewalld
        enabled: true
        state: started

...
